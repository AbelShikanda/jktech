# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  web-deploy:
    name: ðŸŽ‰ Deploy
    runs-on: ubuntu-latest
    steps:
      # Check if the source branch is master

      # Runs a single command using the runners shell
      - name: Ls
        run: ls -la

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can have access to it
      - name: Git Clone
        uses: actions/checkout@v4
        with:
          ref: master

      # Runs a single command using the runners shell
      - name: Ls
        run: ls -la

      # configure php
      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.30.4
        with:
          php-version: "8.3"
          extensions: imagick, swoole, openssl

      # Install composer
      - name: Install composer dependencies
        run: composer install --no-dev --optimize-autoloader

      # PHPUnit tests
      # - name: PHPUnit tests
      #   run: php artisan test

      #   setup node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "21.7.2"

      - name: Check Node.js Version
        run: node -v

      - name: Install Node.js Dependencies
        run: npm install

      - name: Build Assets
        run: npm run dev

      - name: Create Deployment Archive
        env:
          GITHUB_SHA: ${{ github.sha }}
          # first deployments
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules public *

      # store artifacts for distribution
      - name: store artifacts for distribution
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

  # Prepairing release on server
  ssh-release:
    name: ssh-release
    runs-on: ubuntu-latest
    needs: [web-deploy]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Debug build
        run: ls -la

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_jke
          chmod 600 ~/.ssh/id_rsa_jke
          eval $(ssh-agent -s)
          ssh-add -q ~/.ssh/id_rsa_jke
          ssh-keyscan -p "${{ secrets.SSH_SITES_PORT }}" -H "${{ secrets.SSH_SITES_IP }}" >> ~/.ssh/known_hosts

      - name: upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_SITES_PORT }}
          source: ${{ github.sha}}.tar.gz
          target: /home/prtvutnb/jke/artifacts
      - name: extract archive and create directory
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}

          SOURCE_CSS_DIR: /home/prtvutnb/jke/release/${{github.sha}}/public/css
          SOURCE_JS_DIR: /home/prtvutnb/jke/release/${{github.sha}}/public/js
          USERSET: /home/prtvutnb/jke/release/${{github.sha}}/public/userset
          IMAGES: /home/prtvutnb/jke/release/${{github.sha}}/public/img
          FONTS: /home/prtvutnb/jke/release/${{github.sha}}/public/fonts
          SOURCE_ADMIN_DIR: /home/prtvutnb/jke/release/${{github.sha}}/public/admin

          DEST_CSS_DIR: /home/prtvutnb/public_html/css
          DEST_JS_DIR: /home/prtvutnb/public_html/js
          DEST_USERSET: /home/prtvutnb/public_html/userset
          DEST_IMAGES: /home/prtvutnb/public_html/img
          DEST_FONTS: /home/prtvutnb/public_html/fonts
          DEST_ADMIN_DIR: /home/prtvutnb/public_html/admin

          DEST_PARENT_DIR: /home/prtvutnb/public_html
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          password: ${{ secrets.FTP_SITES_PASSWORD }}
          port: ${{ secrets.SSH_SITES_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA,SOURCE_CSS_DIR,SOURCE_JS_DIR,DEST_CSS_DIR,DEST_JS_DIR,DEST_PARENT_DIR,USERSET,SOURCE_ADMIN_DIR,DEST_USERSET,DEST_ADMIN_DIR,IMAGES,DEST_IMAGES,FONTS,DEST_FONTS
          script: |
            mkdir -p "/home/prtvutnb/jke/release/${GITHUB_SHA}"
            tar xzf /home/prtvutnb/jke/artifacts/${GITHUB_SHA}.tar.gz -C "/home/prtvutnb/jke/release/${GITHUB_SHA}"
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/storage
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ ! -d "/home/prtvutnb/jke/storage" ]; then
            mkdir -p /home/prtvutnb/jke/storage/{app,public,framework,logs}
            mkdir -p /home/prtvutnb/jke/storage/framework/{cache,sessions,testing,views}
            mkdir -p /home/prtvutnb/jke/storage/framework/cache/data
            chmod -R 0777 /home/prtvutnb/jke/storage
            fi
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ -d "$SOURCE_CSS_DIR" ]; then
                if [ -d "$DEST_CSS_DIR" ]; then
                    rm -rf "$DEST_CSS_DIR"
                    if [ $? -ne 0 ]; then
                        echo "Failed to remove the destination css directory."
                        exit 1
                    fi
                else
                    echo "css directory does not exist in the destination."
                fi
                mv "$SOURCE_CSS_DIR" "$DEST_PARENT_DIR"
                if [ $? -ne 0 ]; then
                    echo "Failed to move the css directory from source to destination."
                    exit 1
                fi
            else
                echo "css directory does not exist in the source."
            fi
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ -d "$SOURCE_JS_DIR" ]; then
                if [ -d "$DEST_JS_DIR" ]; then
                    rm -rf "$DEST_JS_DIR"
                    if [ $? -ne 0 ]; then
                        echo "Failed to remove the destination js directory."
                        exit 1
                    fi
                else
                    echo "js directory does not exist in the destination."
                fi
                mv "$SOURCE_JS_DIR" "$DEST_PARENT_DIR"
                if [ $? -ne 0 ]; then
                    echo "Failed to move the js directory from source to destination."
                    exit 1
                fi
            else
                echo "js directory does not exist in the source."
            fi
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ -d "$FONTS" ]; then
                if [ -d "$DEST_FONTS" ]; then
                    rm -rf "$DEST_FONTS"
                    if [ $? -ne 0 ]; then
                        echo "Failed to remove the destination asset directory."
                        exit 1
                    fi
                else
                    echo "fonts directory does not exist in the destination."
                fi
                mv "$FONTS" "$DEST_PARENT_DIR"
                if [ $? -ne 0 ]; then
                    echo "Failed to move the fonts directory from source to destination."
                    exit 1
                fi
            else
                echo "fonts directory does not exist in the source."
            fi
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ -d "$IMAGES" ]; then
                if [ -d "$DEST_IMAGES" ]; then
                    rm -rf "$DEST_IMAGES"
                    if [ $? -ne 0 ]; then
                        echo "Failed to remove the destination asset directory."
                        exit 1
                    fi
                else
                    echo "images directory does not exist in the destination."
                fi
                mv "$IMAGES" "$DEST_PARENT_DIR"
                if [ $? -ne 0 ]; then
                    echo "Failed to move the images directory from source to destination."
                    exit 1
                fi
            else
                echo "images directory does not exist in the source."
            fi
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ -d "$USERSET" ]; then
                if [ -d "$DEST_USERSET" ]; then
                    rm -rf "$DEST_USERSET"
                    if [ $? -ne 0 ]; then
                        echo "Failed to remove the destination asset directory."
                        exit 1
                    fi
                else
                    echo "userset directory does not exist in the destination."
                fi
                mv "$USERSET" "$DEST_PARENT_DIR"
                if [ $? -ne 0 ]; then
                    echo "Failed to move the userset directory from source to destination."
                    exit 1
                fi
            else
                echo "userset directory does not exist in the source."
            fi
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            if [ -d "$SOURCE_ADMIN_DIR" ]; then
                if [ -d "$DEST_ADMIN_DIR" ]; then
                    rm -rf "$DEST_ADMIN_DIR"
                    if [ $? -ne 0 ]; then
                        echo "Failed to remove the destination admin directory."
                        exit 1
                    fi
                else
                    echo "admin directory does not exist in the destination."
                fi
                mv "$SOURCE_ADMIN_DIR" "$DEST_PARENT_DIR"
                if [ $? -ne 0 ]; then
                    echo "Failed to move the admin directory from source to destination."
                    exit 1
                fi
            else
                echo "admin directory does not exist in the source."
            fi
            # ++++++++++++++++++++++++++++++++++++++++++   (FIRST TIME)   ++++++++++++++++++++++++++++++++++++++++++
            # mv -f "/home/prtvutnb/jke/release/${GITHUB_SHA}/public/.htaccess" "/home/prtvutnb/public_html"
            # mv -f "/home/prtvutnb/jke/release/${GITHUB_SHA}/public/favicon.ico" "/home/prtvutnb/public_html"
            # mv -f "/home/prtvutnb/jke/release/${GITHUB_SHA}/public/index.php" "/home/prtvutnb/public_html"
            # mv -f "/home/prtvutnb/jke/release/${GITHUB_SHA}/public/robots.txt" "/home/prtvutnb/public_html"
            # mv -f "/home/prtvutnb/jke/release/${GITHUB_SHA}/public/mix-manifest.json" "/home/prtvutnb/public_html"
            # mv -f "/home/prtvutnb/jke/release/${GITHUB_SHA}/public/web.config" "/home/prtvutnb/public_html"
            # ++++++++++++++++++++++++++++++++++++++++++   (LATER TIMES)   +++++++++++++++++++++++++++++++++++++++++
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/.htaccess
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/favicon.ico
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/index.php
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/robots.txt
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/mix-manifest.json
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/web.config
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            rm -rf /home/prtvutnb/jke/release/${GITHUB_SHA}/public/
            # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  # Run befor-hook
  run-befor-hook:
    name: befor-hook
    runs-on: ubuntu-latest
    needs: [web-deploy, ssh-release]
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_jke
          chmod 600 ~/.ssh/id_rsa_jke
          eval $(ssh-agent -s)
          ssh-add -q ~/.ssh/id_rsa_jke
          ssh-keyscan -p "${{ secrets.SSH_SITES_PORT }}" -H "${{ secrets.SSH_SITES_IP }}" >> ~/.ssh/known_hosts

      - name: run-befor-hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: /home/prtvutnb/jke/release/${{github.sha}}
          ACTIVE_RELEASE_PATH: /home/prtvutnb/jke/current
          STORAGE_PATH: /home/prtvutnb/jke/storage
          BASE_PATH: /home/prtvutnb/jke
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          password: ${{ secrets.FTP_SITES_PASSWORD }}
          port: ${{ secrets.SSH_SITES_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            echo "${GITHUB_SHA}"

  # Run activate release
  activate-release:
    name: activate-release
    runs-on: ubuntu-latest
    needs: [web-deploy, ssh-release, run-befor-hook]
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_jke
          chmod 600 ~/.ssh/id_rsa_jke
          eval $(ssh-agent -s)
          ssh-add -q ~/.ssh/id_rsa_jke
          ssh-keyscan -p "${{ secrets.SSH_SITES_PORT }}" -H "${{ secrets.SSH_SITES_IP }}" >> ~/.ssh/known_hosts

      - name: run-activate-release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: /home/prtvutnb/jke/release/${{github.sha}}
          LINK_RELEASE_PATH: /home/prtvutnb/public_html
          ACTIVE_RELEASE_PATH: /home/prtvutnb/jke/current
          STORAGE_PATH: /home/prtvutnb/jke/storage
          BASE_PATH: /home/prtvutnb/jke
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          password: ${{ secrets.FTP_SITES_PASSWORD }}
          port: ${{ secrets.SSH_SITES_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,LARAVEL_ENV,LINK_RELEASE_PATH
          # in the event of trouble recognizing the changes after the link find a solution to refresh
          script: |
            printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
            ln -s -n -f ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -n -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            ln -s -n -f $STORAGE_PATH $LINK_RELEASE_PATH

  # Run Migrations release
  migrations-run:
    name: migrations-run
    runs-on: ubuntu-latest
    needs: [web-deploy, ssh-release, run-befor-hook, activate-release]
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_jke
          chmod 600 ~/.ssh/id_rsa_jke
          eval $(ssh-agent -s)
          ssh-add -q ~/.ssh/id_rsa_jke
          ssh-keyscan -p "${{ secrets.SSH_SITES_PORT }}" -H "${{ secrets.SSH_SITES_IP }}" >> ~/.ssh/known_hosts

      - name: run-migrations
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: /home/prtvutnb/jke/release/${{github.sha}}
          ACTIVE_RELEASE_PATH: /home/prtvutnb/jke/current
          STORAGE_PATH: /home/prtvutnb/jke/storage
          BASE_PATH: /home/prtvutnb/jke
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          password: ${{ secrets.FTP_SITES_PASSWORD }}
          port: ${{ secrets.SSH_SITES_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,LARAVEL_ENV
          # in the event of trouble recognizing the changes after the link find a solution to refresh
          script: |
            cd $ACTIVE_RELEASE_PATH
            # php artisan migrate:refresh --seed --force
            # php artisan migrate --force
            # php artisan db:seed --force
            # php artisan db:seed --class=ServiceTypeSeeder
            # php artisan migrate --path=/database/migrations/2025_02_16_193521_create_promo_codes_table.php --force

  # Run activate release
  run-after-hook:
    name: after-hook
    runs-on: ubuntu-latest
    needs:
      [
        web-deploy,
        ssh-release,
        run-befor-hook,
        activate-release,
        migrations-run,
      ]
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_jke
          chmod 600 ~/.ssh/id_rsa_jke
          eval $(ssh-agent -s)
          ssh-add -q ~/.ssh/id_rsa_jke
          ssh-keyscan -p "${{ secrets.SSH_SITES_PORT }}" -H "${{ secrets.SSH_SITES_IP }}" >> ~/.ssh/known_hosts

      - name: run-after-hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: /home/prtvutnb/jke/release/${{github.sha}}
          ACTIVE_RELEASE_PATH: /home/prtvutnb/jke/current
          STORAGE_PATH: /home/prtvutnb/jke/storage
          BASE_PATH: /home/prtvutnb/jke
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          password: ${{ secrets.FTP_SITES_PASSWORD }}
          port: ${{ secrets.SSH_SITES_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            echo "${GITHUB_SHA}"
            cd $ACTIVE_RELEASE_PATH
            php artisan config:clear
            php artisan config:cache
            php artisan cache:clear
            php artisan route:clear
            php artisan route:cache
            php artisan blade:update

  # Runing cleanup
  clean-up:
    name: Clean-up
    runs-on: ubuntu-latest
    needs:
      [
        web-deploy,
        ssh-release,
        run-befor-hook,
        activate-release,
        migrations-run,
        run-after-hook,
      ]
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_jke
          chmod 600 ~/.ssh/id_rsa_jke
          eval $(ssh-agent -s)
          ssh-add -q ~/.ssh/id_rsa_jke
          ssh-keyscan -p "${{ secrets.SSH_SITES_PORT }}" -H "${{ secrets.SSH_SITES_IP }}" >> ~/.ssh/known_hosts

      - name: run-clean-up
        uses: appleboy/ssh-action@master
        env:
          RELEASE_PATH: /home/prtvutnb/jke/release
          ARTIFACTS_PATH: /home/prtvutnb/jke/artifacts
        with:
          host: ${{ secrets.SSH_SITES_IP }}
          username: ${{ secrets.FTP_SITES_USER }}
          password: ${{ secrets.FTP_SITES_PASSWORD }}
          port: ${{ secrets.SSH_SITES_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: RELEASE_PATH,ARTIFACTS_PATH
          script: |
            cd $RELEASE_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
